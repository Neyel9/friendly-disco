name: CI Pipeline

on: push

jobs:
  project-testing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run pipeline (DVC repro)
        env:
          # AWS S3 credentials for data storage
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

          # MLflow/DagsHub authentication - using token-based auth
          MLFLOW_TRACKING_URI: https://dagshub.com/${{ secrets.DAGSHUB_REPO_OWNER }}/${{ secrets.DAGSHUB_REPO_NAME }}.mlflow
          DAGSHUB_REPO_OWNER: ${{ secrets.DAGSHUB_REPO_OWNER }}
          DAGSHUB_REPO_NAME: ${{ secrets.DAGSHUB_REPO_NAME }}
          DAGSHUB_TOKEN: ${{ secrets.FRIENDLY_DISCO }}

          # Legacy environment variable for backward compatibility (if needed)
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
        run: |
          echo "‚úÖ Running DVC pipeline with S3 access and DagsHub authentication..."
          echo "üîê MLflow URI: $MLFLOW_TRACKING_URI"
          echo "üìä DagsHub Owner: $DAGSHUB_REPO_OWNER"
          echo "üìÅ DagsHub Repo: $DAGSHUB_REPO_NAME"
          dvc repro

      - name: Run model unit tests
        env:
          # MLflow/DagsHub authentication for model testing
          MLFLOW_TRACKING_URI: https://dagshub.com/${{ secrets.DAGSHUB_REPO_OWNER }}/${{ secrets.DAGSHUB_REPO_NAME }}.mlflow
          DAGSHUB_REPO_OWNER: ${{ secrets.DAGSHUB_REPO_OWNER }}
          DAGSHUB_REPO_NAME: ${{ secrets.DAGSHUB_REPO_NAME }}
          DAGSHUB_TOKEN: ${{ secrets.FRIENDLY_DISCO }}

          # Legacy environment variable for backward compatibility (if needed)
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
        run: |
          echo "üß™ Running model unit tests with DagsHub authentication..."
          python -m unittest tests/test_model.py

      - name: Promote model to production
        if: success()
        env:
          # MLflow/DagsHub authentication for model promotion
          MLFLOW_TRACKING_URI: https://dagshub.com/${{ secrets.DAGSHUB_REPO_OWNER }}/${{ secrets.DAGSHUB_REPO_NAME }}.mlflow
          DAGSHUB_REPO_OWNER: ${{ secrets.DAGSHUB_REPO_OWNER }}
          DAGSHUB_REPO_NAME: ${{ secrets.DAGSHUB_REPO_NAME }}
          DAGSHUB_TOKEN: ${{ secrets.FRIENDLY_DISCO }}

          # Legacy environment variable for backward compatibility (if needed)
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
        run: |
          echo "üöÄ Promoting model to production with DagsHub authentication..."
          python scripts/promote_model.py

      - name: Run Flask app unit tests
        if: success()
        env:
          # MLflow/DagsHub authentication for Flask app testing
          MLFLOW_TRACKING_URI: https://dagshub.com/${{ secrets.DAGSHUB_REPO_OWNER }}/${{ secrets.DAGSHUB_REPO_NAME }}.mlflow
          DAGSHUB_REPO_OWNER: ${{ secrets.DAGSHUB_REPO_OWNER }}
          DAGSHUB_REPO_NAME: ${{ secrets.DAGSHUB_REPO_NAME }}
          DAGSHUB_TOKEN: ${{ secrets.FRIENDLY_DISCO }}

          # Legacy environment variable for backward compatibility (if needed)
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
        run: |
          echo "üåê Running Flask app unit tests with DagsHub authentication..."
          python -m unittest tests/test_flask_app.py

         # Deployment steps (commented out for now - uncomment when infrastructure is ready)
      - name: Login to AWS ECR
        if: success()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "üîê Configuring AWS credentials..."
          echo "AWS_ACCESS_KEY_ID length: ${#AWS_ACCESS_KEY_ID}"
          echo "AWS_REGION: $AWS_REGION"

          # Check if required secrets are set
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "‚ùå AWS_ACCESS_KEY_ID is not set in GitHub secrets"
            exit 1
          fi

          if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
            echo "‚ùå AWS_SECRET_ACCESS_KEY is not set in GitHub secrets"
            exit 1
          fi

          if [ -z "$AWS_REGION" ]; then
            echo "‚ùå AWS_REGION is not set in GitHub secrets"
            exit 1
          fi

          # Configure AWS CLI
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws configure set region "$AWS_REGION"
          aws configure set output json

          # Verify AWS configuration
          echo "‚úÖ AWS CLI configured successfully"
          aws sts get-caller-identity

          # Login to ECR
          echo "üîë Logging into AWS ECR..."
          aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"

      - name: Build Docker image
        if: success()
        run: |
          echo "üî® Building Docker image..."
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .
          echo "‚úÖ Docker image built successfully"

      - name: Tag Docker image
        if: success()
        run: |
          echo "üè∑Ô∏è Tagging Docker image for ECR..."
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          echo "‚úÖ Docker image tagged successfully"

      - name: Verify Docker images
        if: success()
        run: |
          echo "üìã Listing Docker images..."
          docker images | grep ${{ secrets.ECR_REPOSITORY }}

      - name: Push Docker image to ECR
        if: success()
        run: |
          echo "üöÄ Pushing Docker image to ECR..."
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          echo "‚úÖ Docker image pushed to ECR successfully"

      # - name: Set up kubectl
      #   uses: azure/setup-kubectl@v3
      #   with:
      #     version: 'latest'

      # - name: Update kubeconfig
      #   run: |
      #     aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name flask-app-cluster

      # - name: Create Kubernetes Secret
      #   run: |
      #     kubectl create secret generic capstone-secret \
      #       --from-literal=MLFLOW_TRACKING_URI=https://dagshub.com/${{ secrets.DAGSHUB_REPO_OWNER }}/${{ secrets.DAGSHUB_REPO_NAME }}.mlflow \
      #       --from-literal=DAGSHUB_REPO_OWNER=${{ secrets.DAGSHUB_REPO_OWNER }} \
      #       --from-literal=DAGSHUB_REPO_NAME=${{ secrets.DAGSHUB_REPO_NAME }} \
      #       --from-literal=DAGSHUB_TOKEN=${{ secrets.FRIENDLY_DISCO }} \
      #       --from-literal=CAPSTONE_TEST=${{ secrets.CAPSTONE_TEST }} \
      #       --dry-run=client -o yaml | kubectl apply -f -

      # - name: Deploy to EKS
      #   run: |
      #     kubectl apply -f deployment.yaml