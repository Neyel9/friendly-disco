name: CI Pipeline

on: push

jobs:
  project-testing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run pipeline (DVC repro)
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
          MLFLOW_TRACKING_URI: https://dagshub.com/${{ secrets.DAGSHUB_REPO_OWNER }}/${{ secrets.DAGSHUB_REPO_NAME }}.mlflow
          DAGSHUB_REPO_OWNER: ${{ secrets.DAGSHUB_REPO_OWNER }}
          DAGSHUB_REPO_NAME: ${{ secrets.DAGSHUB_REPO_NAME }}
          DAGSHUB_TOKEN: ${{ secrets.FRIENDLY_DISCO }}
        run: |
          echo "âœ… Running DVC pipeline with S3 access..."
          dvc repro

      # - name: Run model unit tests
      #   env:
      #     CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
      #   run: |
      #     python -m unittest tests/test_model.py

      # - name: Promote model to production
      #   if: success()
      #   env:
      #     CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
      #   run: |
      #     python scripts/promote_model.py

      # - name: Run Flask app unit tests
      #   if: success()
      #   env:
      #     CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
      #   run: |
      #     python -m unittest tests/test_flask_app.py

      # - name: Login to AWS ECR
      #   if: success()
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_REGION: ${{ secrets.AWS_REGION }}
      #   run: |
      #     aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
      #     aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      #     aws configure set region $AWS_REGION
      #     aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # - name: Build Docker image
      #   run: |
      #     docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .

      # - name: Tag Docker image
      #   run: |
      #     docker tag ${{ secrets.ECR_REPOSITORY }}:latest \
      #       ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      # - name: Check Docker authentication
      #   run: docker info

      # - name: Push Docker image to ECR
      #   run: |
      #     docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      # - name: Set up kubectl
      #   uses: azure/setup-kubectl@v3
      #   with:
      #     version: 'latest'

      # - name: Update kubeconfig
      #   run: |
      #     aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name flask-app-cluster

      # - name: Create Kubernetes Secret
      #   run: |
      #     kubectl create secret generic capstone-secret \
      #       --from-literal=CAPSTONE_TEST=${{ secrets.CAPSTONE_TEST }} --dry-run=client -o yaml | kubectl apply -f -

      # - name: Deploy to EKS
      #   run: |
      #     kubectl apply -f deployment.yaml